<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

    <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <!-- Load the Jersey servlet customized for use with Spring -->
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
        <!-- Paths to lookup for Jersey annotations -->
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>ca.corefacility.bioinformatics.irida.webservices</param-value>
        </init-param>
        <!-- Map POJOs to JSON when responding to requests -->
        <init-param>
            <param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
            <param-value>true</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
    
    <!-- Listeners for Spring -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- Cross Origin Resource Sharing Filters -->
    <filter>
        <filter-name>corsHeaderFilter</filter-name>
        <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>
        
        <!-- What HTTP verbs is the client allowed to tell the server? -->
        <init-param>
            <param-name>cors.supportedMethods</param-name>
            <param-value>GET, POST, HEAD, PUT, DELETE, OPTIONS</param-value>
        </init-param>
        
        <!-- 
            What HTTP headers is the client allowed to pass to the server? 
            We need to specifically allow the Authorization header so that the
            client can authorize itself with Spring Security.
        -->
        <init-param>
            <param-name>cors.supportedHeaders</param-name>
            <param-value>X-Requested-with, Authorization</param-value>
        </init-param>
        <!-- How long should the browser cache the preflight request? -->
        <init-param>
            <param-name>cors.maxAge</param-name>
            <param-value>3600</param-value>
        </init-param>
    </filter>
    
    <filter-mapping>
        <filter-name>corsHeaderFilter</filter-name>
        <url-pattern>/api/*</url-pattern>
    </filter-mapping>
    
    <!-- Filters for Spring Security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/api/*</url-pattern>
    </filter-mapping>
</web-app>
